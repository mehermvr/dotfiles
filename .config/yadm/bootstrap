#!/bin/sh

. "$HOME/.config/yadm/setup_env.sh"

safe_clone() {
	if git clone "$@" 2>/dev/null; then
		return 0
	else
		if [ -z "$NOGUI" ]; then
			read -n 1 -s -p "Clone failed. Press any key to continue or Ctrl+C to abort..."
		else
			echo "Clone failed. Skipping user input due to NOGUI being set."
		fi
		return 1
	fi
}

log_install() {
	echo "============================="
	echo "Working on $1"
	echo "============================="
}

# Install ohmyzsh, thanks nacho
install_zsh() {
	log_install "installing zsh"
	install_package zsh
	export CHSH=no
	export KEEP_ZSHRC=yes
	export RUNZSH=no
	ZSH= sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" || true
	sudo chsh -s "$(which zsh)" "$USER" 2>/dev/null || chsh -s "$(which zsh)"
	# zsh plugins
	safe_clone --depth 1 https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
	safe_clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
	safe_clone https://github.com/esc/conda-zsh-completion ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/conda-zsh-completion
}

install_python_utils() {
	log_install "installing python utilities"
	install_package python3 python3-dev python3-pip python-is-python3 python3-venv
	python3 -m pip install --user --upgrade pip
	pip3 install ipython ipdb
}

install_build_utils() {
	log_install "installing build utilities"
	install_package build-essential cmake
}

install_essential_tools() {
	log_install "installing essential tools"
	install_package bat btop tree ripgrep less
}

install_fonts() {
	log_install "installing fonts"
	install_package fonts-powerline
	safe_clone --filter=blob:none --sparse https://github.com/ryanoasis/nerd-fonts.git $LOCAL_SRC/nerd-fonts
	cd $LOCAL_SRC/nerd-fonts
	git sparse-checkout add patched-fonts/Mononoki
	./install.sh Mononoki
	cd "$HOME"
	fc-cache -f -v
}

install_kitty() {
	log_install "installing kitty"
	curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
	ln -sf ~/.local/kitty.app/bin/kitty ~/.local/kitty.app/bin/kitten $LOCAL_BIN
	mkdir -p ~/.local/share/applications
	cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/
	sed -i "s|Icon=kitty|Icon=/home/$USER/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty*.desktop
	sed -i "s|Exec=kitty|Exec=/home/$USER/.local/kitty.app/bin/kitty|g" ~/.local/share/applications/kitty*.desktop
	safe_clone --depth 1 https://github.com/dexpota/kitty-themes.git ~/.config/kitty-themes
	sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator $LOCAL_BIN/kitty 50
}

install_diff_so_fancy() {
	log_install "installing diff so fancy"
	# git diff-so-fancy setup
	safe_clone https://github.com/so-fancy/diff-so-fancy.git $LOCAL_SRC/diff-so-fancy
	mkdir -p $LOCAL_BIN
	rm $LOCAL_BIN/diff-so-fancy
	ln -s $LOCAL_SRC/diff-so-fancy/diff-so-fancy $LOCAL_BIN/diff-so-fancy
}

install_powerline_10k() {
	log_install "installing powerline10k"
	safe_clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
}

install_i3() {
	log_install "installing i3"
	# stable
	/usr/lib/apt/apt-helper download-file https://debian.sur5r.net/i3/pool/main/s/sur5r-keyring/sur5r-keyring_2023.02.18_all.deb keyring.deb SHA256:a511ac5f10cd811f8a4ca44d665f2fa1add7a9f09bef238cdfad8461f5239cc4
	sudo apt install ./keyring.deb
	echo "deb http://debian.sur5r.net/i3/ $(grep '^DISTRIB_CODENAME=' /etc/lsb-release | cut -f2 -d=) universe" | sudo tee /etc/apt/sources.list.d/sur5r-i3.list
	install_package i3 feh rofi maim
}

install_picom() {
	log_install "installing picom"
	safe_clone https://github.com/yshui/picom.git $LOCAL_SRC/picom
	cd $LOCAL_SRC/picom
	install_package libxext-dev libxcb1-dev libxcb-damage0-dev libxcb-dpms0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-render-util0-dev libxcb-render0-dev libxcb-randr0-dev libxcb-composite0-dev libxcb-image0-dev libxcb-present-dev libxcb-glx0-dev libpixman-1-dev libdbus-1-dev libconfig-dev libgl-dev libegl-dev libpcre2-dev libevdev-dev uthash-dev libev-dev libx11-xcb-dev meson libxcb-util-dev
	git submodule update --init --recursive
	meson setup --buildtype=release . build
	sudo ninja -C build install
	cd $HOME
}

install_neovim() {
	log_install "installing neovim"
	# use the unstable ppa for daily builds
	install_package software-properties-common gpg-agent
	sudo add-apt-repository -y ppa:neovim-ppa/unstable
	install_package neovim
}

install_lazygit() {
	log_install "installing lazygit"
	LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
	curl -Lo /tmp/lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
	cd /tmp && tar xf /tmp/lazygit.tar.gz lazygit
	sudo install /tmp/lazygit $LOCAL_BIN

}
install_neovim_config_deps() {
	log_install "installing neovim config deps"
	install_package fd-find nodejs npm unzip
	# install_lazygit

}

# ============================================
# start install
# ============================================
install_build_utils
install_essential_tools
install_python_utils

cd "$HOME"
install_zsh
export SHELL=$(which zsh)
install_fonts
install_powerline_10k

install_neovim

if [ -z "$NOGUI" ]; then
	install_kitty
# install_i3
# install_picom
# install_diff_so_fancy
else
	echo "NOGUI is set. Skipping GUI-related commands."
fi

yadm remote set-url origin "git@github.com:mehermvr/dotfiles.git"
yadm checkout .
# chmod +x $HOME/.fehbg
